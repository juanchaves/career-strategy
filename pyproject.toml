[project]
name = "career-strategy"
version = "0.0.1"
description = "Strategic career development plan for advancing into data engineering and AI roles"
readme = "README.md"
requires-python = ">=3.13"
license = { file = "LICENSE" }
authors = [
    { name = "Juan Chaves", email = "contact.juanchaves@gmail.com" },
]
dependencies = [
    "polars>=0.18.1",
    "numpy>=1.24.3",
    "pandas>=2.0.3",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.1",
    "commitizen>=4.6.2",
]

[project.optional-dependencies]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "ruff>=0.0.263",
]

# [tool.uv.sources]
# assesments = { workspace = true }
# job-tracker = { workspace = true }
# learning = { workspace = true }
# portfolio = { workspace = true }

# [tool.uv.workspace]
# members = ["assesments/*", "job-tracker/*", "learning/*", "portfolio/*"]
# members = ["packages/*"]
# exclude = ["packages/seeds"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
addopts = "--cov=career_strategy --cov-report=term-missing"

# https://docs.astral.sh/ruff/configuration/
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4
# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "semver2"
version_provider = "uv"
update_changelog_on_bump = true

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
[tool.hatch.build.targets.wheel]
packages = ["."]